# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master
- development

variables:
# For ecommerce
  imageRepositoryecomm: 'ecommerce-store-app'
  containerRegistryecomm: 'ecommercestoreappacr'
  dockerfilePathecomm: '**/ecommerce.dockerfile'
  IMAGE_ECOMM: '$(Build.BuildId)'
# For Json Server
  imageRepositoryjsvr: 'json-server'
  containerRegistryjsvr: 'ecommercestoreappacr'
  dockerfilePathjsvr: '**/jserver.dockerfile'
  IMAGE_JSVR: '$(Build.BuildId)'

stages:
  - stage: Build
    displayName: Build and run tests
    jobs:  
    - job: Build
      displayName: Building the application
      pool:
        vmImage: ubuntu-latest
      steps:

      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      - script: |
          npm install
          npm run build
        displayName: 'npm install and build'

      - task: Docker@2
        displayName: 'Build ecommerce.dockerfile'
        inputs:
          containerRegistry: '$(containerRegistryecomm)'
          repository: '$(imageRepositoryecomm)'
          command: 'buildAndPush'
          Dockerfile: '$(dockerfilePathecomm)'
          tags: '$(IMAGE_ECOMM)'

      - task: Docker@2
        displayName: 'Build jserver.dockerfile'
        inputs:
          containerRegistry: '$(containerRegistryjsvr)'
          repository: '$(imageRepositoryjsvr)'
          command: 'buildAndPush'
          Dockerfile: '$(dockerfilePathjsvr)'
          tags: '$(IMAGE_JSVR)'

  - stage: Deployment
    displayName: Deployment to k8s
    jobs:  
    - job: Deploy
      displayName: Deploy to k8s 
      pool:
        vmImage: ubuntu-latest
      steps:

      - task: CopyFiles@2
        displayName: Copy k8s ecommerce files
        inputs:
          SourceFolder: 'k8s-files/ecommerce'
          Contents: |
            deployment.yaml
            service.yaml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: replacetokens@3
        displayName: "Replacing ecommerce tokens with the definied variables"
        inputs:
          targetFiles: "$(Build.ArtifactStagingDirectory)/*.yaml"
          verbosity: "detailed"
          encoding: "auto"
          writeBOM: false
          actionOnMissing: "fail"
          keepToken: false
          tokenPrefix: "#{"
          tokenSuffix: "}#"
          useLegacyPattern: false
          enableTelemetry: true

      - task: KubernetesManifest@0
        displayName: Deploy ecommerce-store-app service
        inputs:
          action: 'deploy'
          manifests: |
            $(Build.ArtifactStagingDirectory)/service.yaml
          kubernetesServiceConnection: 'ecommerce-dev-cluster'
          containers: |
            ecommercestoreappacr.azurecr.io/#{imageRepositoryecomm}#:#{IMAGE_ECOMM}#

      - task: KubernetesManifest@0
        displayName: Deploy ecommerce-store-app deployment
        inputs:
          action: 'deploy'
          manifests: |
            $(Build.ArtifactStagingDirectory)/deployment.yaml
          kubernetesServiceConnection: 'ecommerce-dev-cluster'
          containers: |
            ecommercestoreappacr.azurecr.io/#{imageRepositoryecomm}#:#{IMAGE_ECOMM}#

      - task: DeleteFiles@1
        displayName: Delete ecommerce target files
        inputs:
          SourceFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '*'

      - task: CopyFiles@2
        displayName: Copy k8s json-server files
        inputs:
          SourceFolder: 'k8s-files/jserver'
          Contents: |
            deployment.yaml
            service.yaml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: replacetokens@3
        displayName: "Replacing jserver tokens with the definied variables"
        inputs:
          targetFiles: "$(Build.ArtifactStagingDirectory)/*.yaml"
          verbosity: "detailed"
          encoding: "auto"
          writeBOM: false
          actionOnMissing: "fail"
          keepToken: false
          tokenPrefix: "#{"
          tokenSuffix: "}#"
          useLegacyPattern: false
          enableTelemetry: true

      - task: KubernetesManifest@0
        displayName: Deploy json-server service
        inputs:
          action: 'deploy'
          manifests: |
            $(Build.ArtifactStagingDirectory)/service.yaml
          kubernetesServiceConnection: 'ecommerce-dev-cluster'
          containers: |
            ecommercestoreappacr.azurecr.io/#{imageRepositoryjsvr}#:#{IMAGE_JSVR}#

      - task: KubernetesManifest@0
        displayName: Deploy json-server deployment
        inputs:
          action: 'deploy'
          manifests: |
            $(Build.ArtifactStagingDirectory)/deployment.yaml
          kubernetesServiceConnection: 'ecommerce-dev-cluster'
          containers: |
            ecommercestoreappacr.azurecr.io/#{imageRepositoryjsvr}#:#{IMAGE_JSVR}#

      - task: DeleteFiles@1
        displayName: Delete jserver target files
        inputs:
          SourceFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '*'